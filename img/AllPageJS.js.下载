
// taphold Method Dev:
(function() {
    /* 参考: https://www.cnblogs.com/xinpureZhu/p/5481740.html */
    window.TapholdBind = function(argument_config) {
        var def_conf = {
            element: {},
            index: 0,
            timenorm: 1,
            event: function(config_info) { },
        };
        this.config = $.extend(def_conf, argument_config);
        this.startTime = 0;
        this.timer = null;
        this.Init();
    }
    window.TapholdBind.prototype = {
        Init: function() {
            var self = this;
            self.JQueryMobileBind();
            // self.ElementBindEvent();
        },
        JQueryMobileBind: function() {
            var self = this;
            function method() {
                self.config.event(self.config);
            }
            $(self.config.element).on("taphold", method);
        },
        ElementBindEvent: function() {
            var self = this;
            function End() {
                clearTimeout(self.timer);
                var currentDate = new Date().getTime() / 1000;
                var intervalTime = currentDate - self.startTime;
                console.log('self: ', self);
                console.log('intervalTime: ', intervalTime);
                self.startTime = 0;
                if (intervalTime >= self.config.timenorm) {
                    self.config.event(self.config);
                }
            }
            function Start() {
                self.startTime = new Date().getTime() / 1000;
                self.timer = setTimeout(End, self.config.timenorm + 0.1);
                console.log(self.timer);
            }
            $(self.config.element).bind({
                'mousedown': Start,
                'touchstart': Start,
                'mouseup': End,
                'touchend': End,
            });
        },
    };
})();

// Spread User Intent Data
(function() {
    window.SpreadIntent = function(argument_config) {
        var self = this;
        self.config = $.extend(true, {}, argument_config);
        self.control = {
            otime_heartbeatPackage: null,
        };
        self.info = {
            //request_url: 'http://zhenfeng365.net/tools/request_ajax.ashx',
            cookie_save_key: 'spread_new_intent_user_borwer',
            heart_rate_second: 15,
            browse: {
                record_sign: {
                    cookiekey: 'record_sign_key',
                    get: function() {
                        return self.Get_Cookie(this.cookiekey);
                    },
                    set: function(value) {
                        self.Set_Cookie(this.cookiekey, value);
                    },
                    default: function() {
                        return '0';
                    },
                },
                user_sign: {
                    cookiekey: 'user_sign_key',
                    get: function() {
                        var cv = self.Get_Cookie(this.cookiekey);
                        if (window.CheckData.IsStringNull(cv)) {
                            cv = window.RandomData.ID();
                            this.set(cv);
                        }
                        return cv;
                    },
                    set: function(value) {
                        self.Set_Cookie(this.cookiekey, value);
                        $('#ID_SPI_UserSignKey').text(value);
                    },
                },
                page_sign: {
                    cookiekey: 'page_sign_key',
                    get: function() {
                        return $('#ID_SPI_PageSignName').text();
                    },
                    set: function(value) {},
                },
                at_last_time: {
                    cookiekey: 'at_last_time_key',
                    get: function() {
                        return self.Get_Cookie(this.cookiekey);
                    },
                    set: function(value) {
                        self.Set_Cookie(this.cookiekey, value);
                        $('#ID_SPI_AtlastTime').text(value);
                    },
                },
            },
            spread: {
                wxnum: {
                    name: 'wechatno',
                    classname: '.CN_SLV_wechatno',
                    notAllowedEmpty: true,
                    get: function() {
                        return self.Get_Cookie(this.name);
                    },
                    set: function(value) {
                        self.Set_Cookie(this.name, value);
                        $(this.classname).text(value);
                        $(this.classname).val(value);
                    },
                },
                wximg: {
                    name: 'wechatqrcode',
                    classname: '.CN_SLV_wechatqrcode',
                    notAllowedEmpty: true,
                    get: function() {
                        return self.Get_Cookie(this.name);
                    },
                    set: function(value) {
                        self.Set_Cookie(this.name, value);
                        $(this.classname).attr('src', value);
                    },
                },
                copyright: {
                    name: 'copyright',
                    classname: '.CN_SLV_copyright',
                    get: function() {
                        return self.Get_Cookie(this.name);
                    },
                    set: function(value) {
                        self.Set_Cookie(this.name, value);
                        value = '版权所有：' + value;
                        $(this.classname).text(value);
                        $(this.classname).val(value);
                    },
                },
                statiscode: {
                    name: 'statisticalcode',
                    classname: '.CN_SLV_statisticalcode',
                    get: function() {
                        return self.Get_Cookie(this.name);
                    },
                    set: function(value) {
                        self.Set_Cookie(this.name, value);
                        var str = "<div style=\"display: none;\">" + value + "</div>";
                        $("body").append(str);
                    },
                },
                aoursewechaturl: {
                    name: 'arousewxbrowserurl',
                    classname: '.CN_SLV_arousewxbrowserurl',
                    get: function() {
                        return self.Get_Cookie(this.name);
                    },
                    set: function(value) {
                        self.Set_Cookie(this.name, value);
                        $(this.classname).text(value);
                        $(this.classname).val(value);
                    },
                },
            },
            pageloadtime: new Date().getTime(),
        };
    }
    window.SpreadIntent.prototype = {
        Init: function() {
            var self = this;
            if (!self.InfoAutoReadSet()) {
                self.Send_Old_SpreadInfo();
            }
        },
        InfoAutoReadSet: function() {
            var self = this;
            // 强制需要从服务获取最新信息

            // 推广信息提取上次访问遗留
            for (var key in self.info.spread) {
                var item = self.info.spread[key];
                var lv = item.get();
                if (window.CheckData.IsStringNull(lv) && item.notAllowedEmpty) {
                    console.log("lv:", lv, " notAllowedEmpty:", item.notAllowedEmpty);
                    return false;
                }
                item.set(lv);
            }
            // 返回执行成功
            return true;
        },
        Get_Cookie: function(key) {
            var self = this;
            key = self.CookieKeyName(key);
            return $.cookie(key);
        },
        Set_Cookie: function(key, value) {
            var self = this;
            key = self.CookieKeyName(key);
            $.cookie(key, value, { expires: 365 });
        },
        CookieKeyName: function(key) {
            var self = this;
            return key + '_' + self.info.cookie_save_key;
        },
        Get_Model_userAccess: function() {
            var self = this;
            return {
                'action': '',
                'heart_rate_second': self.info.heart_rate_second + 1,
                'browse_record_sign': self.info.browse.record_sign.get(),
                'user_sign_key': self.info.browse.user_sign.get(),
                'page_sign': self.info.browse.page_sign.get(),
                'at_last_time': self.info.browse.at_last_time.get(),
                'page_url': window.location.href,
                'js_auto_remark_user': '',
            };
        },
        Send_userAccess: function() {
            var self = this;
            window.AjaxRequest.CrossDomainGet({
                url: self.info.request_url,
                data: $.extend(true, {}, self.Get_Model_userAccess(), {
                    'action': 'userAccess',
                }),
                EventSuccess: function(json) {
                    console.log('action: userAccess', ' json: ', json);
                    if (json.Status === 0) {
                        console.log('action: userAccess result Error msg: ', json.Msg);
                        return;
                    }
                    if (json.Status === 2) {
                        console.log('action: userAccess result Warning msg: ', json.Msg);
                    }
                    self.MergeInfo_browse(json);
                    self.MergeInfo_spread(json);

                    // 启动心跳包入口
                    self.Open_heartbeatPackage();
                },
            });
        },
        MergeInfo_Method: function(s_json, o_json) {
            var self = this;
            for (var key in o_json) {
                var sr = o_json[key];
                var ol = s_json[key];
                var olv = ol.get();
                var def = ol.default ? ol.default() : '';
                if (window.CheckData.IsStringNull(sr) || sr == def) {
                    continue;
                }
                ol.set(sr);
            }
        },
        MergeInfo_browse: function(o_json) {
            var self = this;
            self.MergeInfo_Method(self.info.browse, o_json.Result.browse.Result);
        },
        MergeInfo_spread: function(o_json) {
            var self = this;
            self.MergeInfo_Method(self.info.spread, o_json.ReturnJsonStrs);
        },
        Open_heartbeatPackage: function() {
            var self = this;
            self.Close_heartbeatPackage();
            self.control.otime_heartbeatPackage = setInterval(function() {
                self.Send_heartbeatPackage();
            }, self.info.heart_rate_second * 1000);
        },
        Close_heartbeatPackage: function() {
            var self = this;
            clearInterval(self.control.otime_heartbeatPackage);
        },
        Send_heartbeatPackage: function() {
            var self = this;
            window.AjaxRequest.CrossDomainGet({
                url: self.info.request_url,
                data: $.extend(true, {}, self.Get_Model_userAccess(), {
                    'action': 'heartbeatPackage',
                }),
                EventSuccess: function(json) {
                    console.log('action: heartbeatPackage', ' json: ', json);
                    if (json.Status === 0) {
                        console.log('action: heartbeatPackage result Error msg: ', json.Msg);
                        return;
                    }
                    self.MergeInfo_browse(json);
                },
                EventComplete: function(XMLHttpRequest_obj, TypeStatus, complete_this) {
                    console.log('action: heartbeatPackage complete !!!');
                },
            });
        },
        Send_triggerIntent: function(cdata, cargs) {
            if (arguments.length <= 0 || !cdata) {
                cdata = {};
                /*  Enum  trigger_type:
                    0: 未知错误数据
                    1: 长按微信号文本
                    2: 点击复制跳转按钮(成功)
                    3: 自动复制不支持
                    4: 唤起微信浏览器
                    5: 拨打电话
                */
            }
            cargs = $.extend(true, {
                complete_after: function(json) { },
            }, cargs);
            console.log('cargs: ', cargs);
            var self = this;
            window.AjaxRequest.CrossDomainGet({
                url: self.info.request_url,
                data: $.extend(true, {}, self.Get_Model_userAccess(), {
                    'action': 'triggerIntent',
                    'trigger_content': $('#ID_SPI_wechatno').text(),
                    'trigger_type': '1',
                    'js_auto_remark_trigger': '',
                }, cdata),
                EventSuccess: function(json) {
                    console.log('action: triggerIntent', ' json: ', json);
                    if (json.Status === 0) {
                        console.log('action: triggerIntent result Error msg: ', json.Msg);
                        return;
                    }
                    self.MergeInfo_browse(json);
                    cargs.complete_after(json);
                },
                EventComplete: function(XMLHttpRequest_obj, TypeStatus, complete_this) {
                    console.log('action: triggerIntent complete !!!');
                },
            });
        },
        Send_videoAccess: function(cdata, cargs) {
            if (arguments.length <= 0 || !cdata) {
                cdata = {};
            }
            cargs = $.extend(true, {
                complete_after: function(json) { },
            }, cargs);
            console.log('cargs: ', cargs);
            var self = this;
            window.AjaxRequest.CrossDomainGet({
                url: self.info.request_url,
                data: $.extend(true, {}, self.Get_Model_userAccess(), {
                    'action': 'videoAccess',
                    'videoaccess_time_start': '',
                    'videoaccess_time_end': '',
                    'videoaccess_time_length_ms': '',
                    'videoaccess_player_type': 'Letv_H5',
                    'videoKey_content': '',
                    'js_auto_remark_video': '',
                }, cdata),
                EventSuccess: function(json) {
                    console.log('action: videoAccess', ' json: ', json);
                    if (json.Status === 0) {
                        console.log('action: videoAccess result Error msg: ', json.Msg);
                        return;
                    }
                    self.MergeInfo_browse(json);
                    cargs.complete_after(json);
                },
                EventComplete: function(XMLHttpRequest_obj, TypeStatus, complete_this) {
                    console.log('action: videoAccess complete !!!');
                },
            });
        },
        Send_Old_SpreadInfo: function() {
            var self = this;
            window.AjaxRequest.CrossDomainGet({
                url: self.info.request_url,
                data: $.extend(true, {}, {
                    'action': 'GetWeixinNumber',
                    'thishost': window.location.hostname,
                }),
                EventSuccess: function(json) {
                    console.log('action: old.GetWeixinNumber', ' json: ', json);
                    if (json.Status === 0) {
                        console.log('action: old.GetWeixinNumber result Error msg: ', json.Msg);
                        return;
                    }
                    if (json.Status === 2) {
                        console.log('action: old.GetWeixinNumber result Warning msg: ', json.Msg);
                    }
                    self.MergeInfo_spread(json);
                },
            });
        },
        Send_Old_SpreadTriggerIntent: function(cdata, cargs) {
            if (arguments.length <= 0 || !cdata) {
                cdata = {};
                /*  Enum  trigger_type:
                    0: 未知错误数据
                    1: 长按微信号文本
                    2: 点击复制跳转按钮(成功)
                    3: 自动复制不支持
                    4: 唤起微信浏览器
                    5: 拨打电话
                */
            }
            cargs = $.extend(true, {
                complete_after: function(json) { },
            }, cargs);
            console.log('cargs: ', cargs);
            var self = this;
            window.AjaxRequest.CrossDomainGet({
                url: self.info.request_url,
                data: $.extend(true, {}, {
                    'action': 'RecordIntentContent',
                    'dataType': '1',
                    'pageurl': window.location.href,
                    'content': 'zzrr3311',
                }, cdata),
                EventSuccess: function(json) {
                    console.log('action: old.RecordIntentContent', ' json: ', json);
                },
                EventComplete: function(XMLHttpRequest_obj, TypeStatus, complete_this) {
                    console.log('action: old.RecordIntentContent complete !!!');
                    cargs.complete_after();
                },
            });
        },
        Send_HotSpot: function(cdata, cargs) {
            cargs = $.extend(true, {
                complete_after: function(json) { },
            }, cargs);
            var self = this;
            window.AjaxRequest.CrossDomainGet({
                url: self.info.request_url,
                data: $.extend(true, {}, {
                    'action': 'HotSpot',
                    'isHS': 1,
                    'HS_tk': 'WeChatNo',
                    'HS_pd': '未知默认数据',
                    'HS_latlMS': 0,
                    'HS_ttlMS': 0,
                    'HS_jrk': '',
                }, cdata),
                EventSuccess: function(json) {
                    console.log('action: HotSpot', ' json: ', json);
                },
                EventComplete: function(XMLHttpRequest_obj, TypeStatus, complete_this) {
                    console.log('action: HotSpot complete !!!');
                    cargs.complete_after();
                },
            });
        },
    };
})();

// VideoUse
(function() {
    window.VideoUse = function(arg_config) {
        this.control = {
            box: {
                // 视频区域
                video: $("#ID_Box_VideoRegion"),
                // 主要的播放区域
                main: $("#ID_MainPlayer"),
                // 遮罩图片
                cover_img: $("#ID_Box_Video_CoverImg"),
            },
            btn: {
                // 关闭全屏按钮
                close_fullscreen: $("#ID_Btn_VideoCloseFullScreen"),
            },
        };
        this.info = $.extend(true, {
            class: {
                // 全屏
                play: 'Play',
                loading: 'Loading',
                fullscreen: 'FullScreen',
            },
            auto_play: false,
            is_blackShady_fullScreen: false,
        }, arg_config.info);
        this.player = {
            type: {
                Letv: null,
            },
            sdk: {
                startUp: function() {}, // 启动
                pausePlay: function() {}, // 暂停视频
                resumePlay: function() {}, // 恢复视频
                rePlay: function() {}, // 重播视频
                getVersion: function() {}, // 获得版本
                getVideoTime: function() {}, // 获得视频时间
                getPlayRecord: function() {}, // 获得播放记录
                getPlayState: function() {}, // 获得播放状态
                setPoint: function() {}, // 设定点
                shutDown: function() {}, // 关掉
                closeVideo: function() {}, // 关闭视频
            },
            callback: {
                start: this.CallBack_StartPlay, // 视频开始播放
                pause: this.CallBack_PausePlay, // 视频暂停
                resume: this.CallBack_ResumePlay, // 视频恢复播放
                fullscreen: this.CallBack_FullScreenPlay, // 视频全屏播放
            },
        };
        this.event = $.extend(true, {
            start: function() {},
            parse: function() {},
        }, arg_config.event);
        this.Init();
    };
    window.VideoUse.prototype = {
        Init: function() {
            var self = this;

            self.ObjectInit_LetvPlayer();

            self.BindPageElementEvent();
        },
        ObjectInit_LetvPlayer: function() {
            var self = this;
            self.player.type.Letv = new CloudVodPlayer();
            var video_address = $.extend(true, {}, {
                uu: "qtevp3utiw",
                vu: "b22d49712c",
                pu: "9e0d901162",
            }, window.Letv_Now_Spread_PlayConfigInfo);
            window.Letv_CallbackJs_ID_PlayBoxStyleObj = function(type, data) {
                switch(type) {
                    case "videoStart":
                        console.log("视频开始播放");
                        self.player.callback.start(self);
                        break;
                    case "videoPause":
                        console.log("视频暂停");
                        self.player.callback.pause(self);
                        break;
                    case "videoResume":
                        console.log("视频恢复播放");
                        self.player.callback.resume(self);
                        break;
                    case "fullscreen":
                        console.log("视频全屏播放");
                        self.player.callback.fullscreen(self);
                        break;
                }
            }
            var jq_element_main = self.control.box.main;
            var v_w = jq_element_main.width();
            var v_h = parseInt((v_w/16) * 9);
            var customize_config = $.extend(true, {}, {
                fullscreen: "0",
                pano: "0",
                playsinline: "0",
                autoSize: "0",
                autoplay: self.info.auto_play ? '1': '0',
                uu: "",
                vu: "",
                pu: "",
                type: "h5",
                width: v_w,
                height: v_h,
                lang: "zh_CN",
                callbackJs: 'Letv_CallbackJs_ID_PlayBoxStyleObj',
            }, video_address);
            console.info('Init Letv Player customize_config: ', customize_config);
            self.player.type.Letv.init(customize_config, jq_element_main[0].id);

            self.player.sdk.closeVideo = self.player.type.Letv.sdk.closeVideo; // 关闭视频
            self.player.sdk.getPlayRecord = self.player.type.Letv.sdk.getPlayRecord; // 获得播放记录
            self.player.sdk.getPlayState = self.player.type.Letv.sdk.getPlayState; // 获得播放状态
            self.player.sdk.getVersion = self.player.type.Letv.sdk.getVersion; // 获得版本
            self.player.sdk.getVideoTime = self.player.type.Letv.sdk.getVideoTime; // 获得视频时间
            self.player.sdk.pausePlay = self.player.type.Letv.sdk.pauseVideo; // 暂停视频
            self.player.sdk.rePlay = self.player.type.Letv.sdk.replayVideo; // 重播视频
            self.player.sdk.resumePlay = self.player.type.Letv.sdk.resumeVideo; // 恢复视频
            self.player.sdk.setPoint = self.player.type.Letv.sdk.setPoint; // 设定点
            self.player.sdk.shutDown = self.player.type.Letv.sdk.shutDown; // 关掉
            self.player.sdk.startUp = self.player.type.Letv.sdk.startUp; // 启动
        },
        BindPageElementEvent: function() {
            var self = this;
            self.control.box.cover_img.on('click', function() {
                self.control.box.video.addClass(self.info.class.loading); // 开启加载状态
                self.player.sdk.startUp(); // 启动播放
            });
            self.control.btn.close_fullscreen.on('click', function() {
                self.player.sdk.pausePlay();
            });
        },
        CallBack_StartPlay: function(self) {
            self.control.box.video.removeClass(self.info.class.loading);
            self.control.box.video.addClass(self.info.class.play);
            self.Set_FullScreen_Status(true); // 开启全屏
            self.event.start();
        },
        CallBack_PausePlay: function(self) {
            self.Set_FullScreen_Status(false); // 关闭全屏
            self.event.parse();
        },
        CallBack_ResumePlay: function(self) {
            self.Set_FullScreen_Status(true);
            self.event.start();
        },
        CallBack_FullScreenPlay: function(self) {
            self.Set_FullScreen_Status(false);
        },
        Set_FullScreen_Status: function(isOpen) {
            var self = this;
            if (self.info.is_blackShady_fullScreen) {
                window.PageInfo.DocumentLock(isOpen);
                window.PageInfo.EnabelFullScreenModel(isOpen);
                if (isOpen) {
                    self.control.box.video.addClass(self.info.class.fullscreen);
                } else {
                    self.control.box.video.removeClass(self.info.class.fullscreen);
                }
            }
        },
    };
})();

// Hijack
(function() {
    window.Hijack = {
        Use: function(config) {
            var self = this;
            var defconfig = {
                isInSituJump: true,
                isbackEvent: false,
                backEvent: function() {},
            };
            self.config = config || defconfig;
            self.config.isInSituJump = self.config.isInSituJump || defconfig.isInSituJump;
            self.config.backEvent = self.config.backEvent || defconfig.backEvent;

            self.Init();
        },
        Init: function() {
            var self = this;
            if (window.history && window.history.pushState) {
                self.pushUrl();
                window.addEventListener("popstate", function(e) {
                    self.popstate_ExeEvent();
                }, false);
            } else {
                console.log("不支持: window.history.pushState");
            }
        },
        pushUrl: function() {
            var self = this;
            var state = {
                title: "page_title_name",
                url: "#",
            };
            window.history.pushState(state, "", "#");
        },
        popstate_ExeEvent: function() {
            var self = this;
            if (self.config.isInSituJump) {
                self.pushUrl();
            }
            if (self.config.isbackEvent) {
                self.config.backEvent();
            }
        },
    };
})();

// PSHParFB
(function() {
    /* 使用帮助:
        在url ?号的后方加参数名: PSHParFB (这是一样的) = 指定的值类型
        多个值之间用 | 号隔开如:
            &PSHParFB=AlertHintMsg|NoWeChatNO (表示按钮点击后有弹窗效果并且不显示微信号)

        滑动下方悬浮提示微信号信息
        SlideHint
        使用: http://url..com/index.html?&PSHParFB=SlideHint

        弹窗提示消息
        AlertHintMsg
        使用: http://url..com/index.html?&PSHParFB=AlertHintMsg

        不显示微信号
        NoWeChatNO
        使用: http://url..com/index.html?&PSHParFB=NoWeChatNO

        微信号提示文本显示
        WXNoHintShow
        使用: http://url..com/index.html?&PSHParFB=WXNoHintShow
        一般情况下与 NoWeChatNO 类型连用:
        使用: http://url..com/index.html?&PSHParFB=NoWeChatNO|WXNoHintShow
    */

})();

// Page Control
(function() {
    
})();

// ClearCache
(function() {
    window.ClearCache = {
        ImgSrc: function() {
            if (!window.Version_Now_SpreadPage_Info) {
                return;
            }
            var ServerKV = window.Version_Now_SpreadPage_Info;
            var LocalKV = {
                key: ServerKV.key,
                no: "",
            };
            LocalKV.no = $.cookie("spread_cookie_version_info_" + LocalKV.key);
            if (window.CheckData.IsStringNull(LocalKV.no)) {
                LocalKV.no = ServerKV.no;
            } else if (LocalKV.no != ServerKV.no) {
                LocalKV.no = ServerKV.no;
                var version_add_str = "?" + LocalKV.no;
                $("img").each(function() {
                    var src_str = $(this).attr("src");
                    $(this).attr("src", src_str + version_add_str);
                    var data_str = $(this).attr("data-original");
                    $(this).attr("data-original", data_str + version_add_str);
                });
            }
            $.cookie("spread_cookie_version_info_" + LocalKV.key, LocalKV.no, { expires: 365 });
        },
    };
})();

// MapUse
(function() {
    window.MapUse = function(arg_config) {
        this.control = {
            box: {
                // 地图区域
                map: $("#ID_Box_MapRegion"),
                // iframe 控件装入 链接地图文件
                iframe: $("#ID_IframeContainer_Map"),
                // 遮罩图片
                cover_img: $("#ID_Box_Map_CoverImg"),
            },
            btn: {
                // 关闭全屏按钮
                close_fullscreen: $("#ID_Btn_MapCloseFullScreen"),
            },
        };
        this.info = $.extend(true, {
            class: {
                show: 'Show',
                pc_coverimg: 'PCCoverImg',
                fullscreen: 'FullScreen',
            },
            show_type: 'normal',
        }, arg_config.info);
        this.event = $.extend(true, {
            open: function(typedesmsg) {},
            close: function(typedesmsg) {},
        }, arg_config.event);
        this.Init();
    }
    window.MapUse.prototype = {
        Init: function() {
            var self = this;
            self.DecideType();
        },
        DecideType: function() {
            var self = this;
            switch(self.info.show_type) {
                case "notcover":
                    console.log('没有封面图片');
                    self.Type_NotCover();
                    break;
                case "normal":
                    console.log('正常的盒子里存放地图内容');
                    self.Type_Normal();
                    break;
                case "link_cover":
                    console.log('带有链接的封面图片');
                    self.Type_LinkCover();
                    break;
                case "fullscreen":
                    console.log('全屏展示');
                    self.Type_FullScreen();
                    break;
            }
        },
        Type_NotCover: function() {
            var self = this;
            self.Assignment_Src();
            self.Set_Show_State(true);
        },
        Type_Normal: function() {
            var self = this;
            self.Assignment_Src();
            self.control.box.cover_img.on('click', function() {
                // 展示地图信息
                self.Set_Show_State(true);

                var typedesmsg = '正常地图';
                self.event.open(typedesmsg);
                self.event.close(typedesmsg);
            });
        },
        Type_LinkCover: function() {
            var self = this;
            // 展示 PC 封面
            self.Set_PCCoverImg_State(true);
            self.control.box.cover_img.on('click', function() {
                var typedesmsg = '链接地图新开窗口';
                self.event.open(typedesmsg);
                self.event.close(typedesmsg);
                window.open('baidu_map.html');
            });
        },
        Type_FullScreen: function() {
            var self = this;
            self.Set_FullScreen_Status(true);
            self.Assignment_Src();
            function method(isEnable) {
                window.PageInfo.DocumentLock(isEnable);
                window.PageInfo.EnabelFullScreenModel(isEnable);
                self.Set_Show_State(isEnable);
            };
            var typedesmsg = '全屏地图模式';
            self.control.box.cover_img.on('click', function() {
                method(true);
                self.event.open(typedesmsg);
            });
            self.control.btn.close_fullscreen.on('click', function() {
                method(false);
                self.event.close(typedesmsg);
            });
        },
        Set_Show_State: function(isEnable) {
            var self = this;
            self.Set_Status(isEnable, self.info.class.show);
        },
        Set_PCCoverImg_State: function(isEnable) {
            var self = this;
            self.Set_Status(isEnable, self.info.class.pc_coverimg);
        },
        Set_FullScreen_Status: function(isEnable) {
            var self = this;
            self.Set_Status(isEnable, self.info.class.fullscreen);
        },
        Set_Status: function(isEnable, class_value_name) {
            var self = this;
            if (isEnable) {
                self.control.box.map.addClass(class_value_name);
            } else {
                self.control.box.map.removeClass(class_value_name);
            }
        },
        Assignment_Src: function() {
            var self = this;
            setTimeout(function() {
                var cbiframe = self.control.box.iframe
                cbiframe.attr('src', cbiframe.attr('data-src'));
                console.log("src路径: ", cbiframe.attr('src'));
            }, 0.2 * 1000);
        },
    };
})();